stages:
  - test
  - build
  - deploy

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  TAG: "$CI_COMMIT_SHORT_SHA"
  REGISTRY: "$CI_REGISTRY/cpelyon/5eti-projet-2024-2025/groupe-7/pick-eat"

test_gradle:
  stage: test
  image: gradle:7.6-jdk17
  script:
    - gradle test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_proxy:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - echo "Building the Docker image for proxy..."
    - docker build -t $REGISTRY/proxy:$TAG -t $REGISTRY/proxy:latest proxy/
    - echo "Pushing the Docker image to the registry..."
    - docker push $REGISTRY/proxy:$TAG
    - docker push $REGISTRY/proxy:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
  
build_event:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg TARGET_SERVICE=event -t $REGISTRY/event:$TAG -t $REGISTRY/event:latest .
    - docker push $REGISTRY/event:$TAG
    - docker push $REGISTRY/event:latest
  needs: 
    - test_gradle
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_auth:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg TARGET_SERVICE=auth -t $REGISTRY/auth:$TAG -t $REGISTRY/auth:latest .
    - docker push $REGISTRY/auth:$TAG
    - docker push $REGISTRY/auth:latest
  needs: 
    - test_gradle
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_auth_db:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -t $REGISTRY/auth_database:$TAG -t $REGISTRY/auth_database:latest PostgresDatabase/
    - docker push $REGISTRY/auth_database:$TAG
    - docker push $REGISTRY/auth_database:latest
  needs: 
    - test_gradle
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_restaurant:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg TARGET_SERVICE=restaurant -t $REGISTRY/restaurant:$TAG -t $REGISTRY/restaurant:latest .
    - docker push $REGISTRY/restaurant:$TAG
    - docker push $REGISTRY/restaurant:latest
  needs:
    - test_gradle
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_socket_spring:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --build-arg TARGET_SERVICE=socketspring -t $REGISTRY/socketspring:$TAG -t $REGISTRY/socketspring:latest .
    - docker push $REGISTRY/socketspring:$TAG
    - docker push $REGISTRY/socketspring:latest
  needs:
    - test_gradle
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

# Python service
# build_python:
#   image: python:3.11
#   stage: build
#   script:
#     - for dir in $(find . -name 'requirements.txt' -exec dirname {} \;); do (cd $dir && pip install -r requirements.txt); done

# test_python:
#   image: python:3.11
#   stage: test
#   script:
#     - for dir in $(find . -name 'requirements.txt' -exec dirname {} \;); do (cd $dir && pytest --junitxml=report.xml); done
#   artifacts:
#     when: always
#     reports:
#       junit:
#         - report.xml

test_billing:
  stage: test
  image: python:3.10.16
  before_script:
    - apt update
    - apt install -y libgl1-mesa-glx
  script:
    - cd billing
    - pip install -r requirements.txt
    - pytest -vv
  artifacts:
    when: always
    reports:
      junit:
        - report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_billing:
  image: docker:20.10
  stage: build
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - cd billing
    - docker build -t $REGISTRY/billing:$TAG -t $REGISTRY/billing:latest .
    - docker push $REGISTRY/billing:$TAG
    - docker push $REGISTRY/billing:latest
  needs:
    - test_billing
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

build_broker:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - echo "Building the Docker image for proxy..."
    - docker build -t $REGISTRY/broker:$TAG -t $REGISTRY/broker:latest activemq/
    - echo "Pushing the Docker image to the registry..."
    - docker push $REGISTRY/broker:$TAG
    - docker push $REGISTRY/broker:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying to production server..."
#     # Add your deployment commands here
#   only:
#     - main



# test_restaurant:
#   stage: test
#   image: gradle:7.6-jdk17
#   script:
#     - cd restaurant
#     - gradle test
#   only:
#     - main

build_analyze_bill:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - cd scan_ticket_caisse
    - docker build -t $REGISTRY/analyze_bill:$TAG -t $REGISTRY/analyze_bill:latest .
    - docker push $REGISTRY/analyze_bill:$TAG
    - docker push $REGISTRY/analyze_bill:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"